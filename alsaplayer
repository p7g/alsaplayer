#!/usr/bin/env python3

import mimetypes
import os
import queue
import signal
import sys
import threading
from subprocess import Popen, PIPE, DEVNULL


def is_audio_file(path):
    mt, _ = mimetypes.MimeTypes().guess_type(path)
    return isinstance(mt, str) \
        and mt.startswith('audio/') \
        and mt != 'audio/x-mpegurl'


def start_decoder(file):
    return Popen(('ffmpeg', '-i', file, '-f', 'wav', '-'), stdin=DEVNULL,
                 stdout=PIPE, stderr=DEVNULL)


def start_player(input):
    return Popen(('aplay', '-f', 'cd'), stdin=input, stdout=DEVNULL,
                 stderr=DEVNULL)


def collect_input(q, prompt):
    while True:
        try:
            instruction = input(prompt)
        except EOFError:
            print('')
            continue

        if instruction in ('?', 'help'):
            print(command_usage)
            continue
        if instruction not in ('next', 'pause', 'play', 'quit', 'exit'):
            print('Unrecognized input')
            continue

        q.put(instruction)


class Player:
    def __init__(self):
        super().__init__()
        self.running_ffmpeg = None
        self.running_aplay = None

    def stop(self):
        for p in (self.running_aplay, self.running_ffmpeg):
            if p is not None:
                p.terminate()

    def pause(self):
        self.running_ffmpeg.send_signal(signal.SIGSTOP)

    def resume(self):
        self.running_ffmpeg.send_signal(signal.SIGCONT)

    def play(self, path):
        self.stop()

        self.running_ffmpeg = start_decoder(path)
        self.running_aplay = start_player(self.running_ffmpeg.stdout)

        print(f'Now playing: {os.path.basename(path)}')


command_usage = '''\
Commands:
	help, ?		Show this help message
	next		Skip the current song
	prev, previous	Return to the previous song
	pause		Pause the current song
	play		Resume the current song
	quit, exit	Exit the program
'''


class PlayerThread(threading.Thread):
    def __init__(self, file_queue, instruction_queue, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.shutdown_flag = threading.Event()
        self.file_queue = file_queue
        self.instruction_queue = instruction_queue

    def run(self):
        player = Player()

        while True:
            if self.shutdown_flag.is_set():
                player.stop()
                return

            if not self.instruction_queue.empty():
                instruction = self.instruction_queue.get()
                if instruction == 'next':
                    player.stop()
                    if self.file_queue.empty():
                        return
                    player.play(self.file_queue.get())
                elif instruction == 'pause':
                    player.pause()
                    print('Paused')
                elif instruction == 'play':
                    print('Resuming')
                    player.resume()
                elif instruction in ('quit', 'exit'):
                    player.stop()
                    print('bye')
                    return

            if player.running_aplay is not None \
                    and player.running_aplay.poll() is not None:
                player.stop()
                if self.file_queue.empty():
                    return
                player.play(self.file_queue.get())

            if player.running_aplay is None and not self.file_queue.empty():
                player.play(self.file_queue.get())


def run_files(paths):
    input_queue = queue.Queue()
    file_queue = queue.Queue()

    input_thread = threading.Thread(target=collect_input,
                                    args=[input_queue, ''],
                                    daemon=True)
    player_thread = PlayerThread(file_queue, input_queue)

    for path in paths:
        file_queue.put(path)

    input_thread.start()
    player_thread.start()

    signal.signal(signal.SIGTERM, lambda *a: player_thread.shutdown_flag.set())
    signal.signal(signal.SIGINT, lambda *a: player_thread.shutdown_flag.set())

    player_thread.join()


usage = '''\
usage: %s [<music dir>]

Arguments:
        music dir:	The directory with audio files to be played

'''


if __name__ == '__main__':
    if len(sys.argv) > 2:
        print(usage % sys.argv[0])
        exit(1)

    name = sys.argv[1] if len(sys.argv) == 2 else '.'

    if os.path.isdir(name):
        paths = os.listdir(name)
    else:
        paths = [name]

    try:
        run_files(list(filter(is_audio_file, paths)))
    except KeyboardInterrupt:
        pass
