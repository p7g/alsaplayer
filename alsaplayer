#!/usr/bin/env python3

import mimetypes
import os
import signal
import sys
from subprocess import Popen, PIPE, DEVNULL


def is_audio_file(path):
    mt, _ = mimetypes.MimeTypes().guess_type(path)
    return isinstance(mt, str) \
        and mt.startswith('audio/') \
        and mt != 'audio/x-mpegurl'


def start_decoder(file):
    return Popen(('ffmpeg', '-i', file, '-f', 'wav', '-'), stdin=DEVNULL,
                 stdout=PIPE, stderr=DEVNULL)


def start_player(input):
    return Popen(('aplay', '-f', 'cd'), stdin=input, stdout=DEVNULL,
                 stderr=DEVNULL)


class Playlist:
    def __init__(self, files):
        self.position = 0
        self.files = list(files)

    @property
    def current(self):
        return self.files[self.position]


class Player:
    def __init__(self, playlist):
        super().__init__()
        self.running_ffmpeg = None
        self.running_aplay = None
        self.playlist = playlist

    def stop(self):
        for p in (self.running_aplay, self.running_ffmpeg):
            if p is not None:
                p.terminate()

    def play(self):
        while True:
            self.stop()

            if self.playlist.position > len(self.playlist.files):
                return
            if self.playlist.position < 0:
                self.playlist.position = 0

            path = self.playlist.current
            self.running_ffmpeg = start_decoder(path)
            self.running_aplay = start_player(self.running_ffmpeg.stdout)

            print('Now playing '
                  f'{self.playlist.position+1}/{len(self.playlist.files)}: '
                  f'{os.path.basename(path)}')

            while True:
                try:
                    instruction = input('> ')
                except EOFError:
                    print('')
                    continue

                if instruction in ('help', '?'):
                    print(command_usage)
                elif instruction == 'next':
                    self.playlist.position += 1
                    break
                elif instruction in ('previous', 'prev'):
                    self.playlist.position -= 1
                    break
                elif instruction == 'pause':
                    self.running_ffmpeg.send_signal(signal.SIGSTOP)
                elif instruction == 'play':
                    self.running_ffmpeg.send_signal(signal.SIGCONT)
                elif instruction in ('quit', 'exit'):
                    self.stop()
                    print('bye')
                    return
                else:
                    print('Unrecognized input')


command_usage = '''\
Commands:
	help, ?		Show this help message
	next		Skip the current song
	prev, previous	Return to the previous song
	pause		Pause the current song
	play		Resume the current song
	quit, exit	Exit the program
'''


def run_files(paths):
    Player(Playlist(paths)).play()


usage = '''\
usage: %s [<music dir>]

Arguments:
        music dir:	The directory with audio files to be played

'''


if __name__ == '__main__':
    if len(sys.argv) > 2:
        print(usage % sys.argv[0])
        exit(1)

    name = sys.argv[1] if len(sys.argv) == 2 else '.'

    if os.path.isdir(name):
        paths = list(filter(is_audio_file, os.listdir(name)))
    else:
        paths = [name]

    try:
        run_files(paths)
    except KeyboardInterrupt:
        pass
